#include <stdio.h>
#include <stdlib.h>

#define NB_LIGNES_HEROS 5
#define NB_COLONNES_HEROS 7

#define NB_LIGNES_UNITES 12
#define NB_COLONNES_UNITES 8

#define NB_LIGNES_CARTE 10
#define NB_COLONNES_CARTE 10

#define NB_LIGNES_JOUEURS 5
#define NB_COLONNES_JOUEURS 16

#define NB_LIGNES_HEROSJOUEURS 25
#define NB_COLONNES_HEROSJOUEURS 11

#define NB_LIGNES_UNITESJOUEURS 60
#define NB_COLONNES_UNITESJOUEURS 11

#define NB_LIGNES_UNITESBATAILLE 12
#define NB_COLONNES_UNITESBATAILLE 13

#define NB_LIGNES_PLATEAUBATAILLE 12
#define NB_COLONNES_PLATEAUBATAILLE 12

#define JOUEUR_HUMAIN 0
#define LARGEUR_ECRAN_EN_CARACTERES 151

#define nbr_emplacement 6

typedef enum {NUM_JOUEUR_J, LIGNE_J, COLONNE_J, OR, BOIS, PIERRE, FER, SOUFFRE,
SULFURE, GEMME_ROUGE, GEMME_BLEU, GEMME_JAUNE, NB_UNITES_TUEES,
NB_BATAILLE_GAGNES, NB_UNITES_PERDUES, NB_BATAILLE_PERDUES} E_JOUEURS;

typedef enum { NUM_HERO_H, BONUS_ATTAQUE_H, BONUS_DEFENSE_H,
CHANCE_CRITIQUE_H, MORAL_H, POINTS_ATTAQUE_SPECIALE_H, PRIX_H } E_HEROS;

typedef enum { NUM_UNITE_U, TYPE_U, SANTE_U, ATTAQUE_U, DEFENSE_U, DEGATS_U,
MOUVEMENTS_U, PRIX_U } E_UNITES;

typedef enum { NUM_JOUEUR_HJ, NUM_HERO_HJ, HERO_PRINCIPAL, POINTS_EXPERIENCE,
NIVEAU_HJ, POINTS_COMPETENCE_HJ, BONUS_ATTAQUE_HJ, BONUS_DEFENSE_HJ,
CHANCE_CRITIQUE_HJ, MORAL_HJ, POINTS_ATTAQUE_SPECIALE_HJ } E_HEROSJOUEURS;

typedef enum { NUM_JOUEUR_UJ, NUM_UNITE_UJ, TYPE_UJ, SANTE_UJ, ATTAQUE_UJ,
DEFENSE_UJ, DEGATS_UJ, MOUVEMENTS_UJ, NOMBRE_UJ, NIVEAU_UJ, UNITE_ACTIVE }
E_UNITESJOUEURS;

typedef enum { NUM_JOUEUR_UB, NUM_UNITE_UB, TYPE_UB, SANTE_RESTANTE_UB,
ATTAQUE_UB, DEFENSE_UB, DEGATS_UB, MOUVEMENTS_UB, NOMBRE_UNITES_UB,
LIGNE_UB, COLONNE_UB, FINTOUR_UB, SANTE_UNITAIRE_UB} E_UNITESBATAILLE;


void chargerFichierVersTableau (int nb_lignes,int nb_colonnes,int tab[nb_lignes][nb_colonnes],char* nomFichier){
    int i,j;
    FILE*fic=fopen(nomFichier,"r");
if (fic == NULL){
    exit(1);}
    else{
      for(i=0;i<nb_lignes;i++){
      for(j=0;j<nb_colonnes;j++)
     {
        fscanf(fic,"%d",&tab[i][j]);
     }
       }}
     fclose(fic);
    }


void sauvegarderTableauDansFichier (int nb_lignes, int nb_colonnes, int tab[nb_lignes][nb_colonnes],char* nomFichier){
   int i,j;
   FILE *fic=fopen(nomFichier,"w");
    if(fic==NULL){
         exit(1);
    }
    else{
      for(i=0;i< nb_lignes;i++){
        for(j=0;j<nb_colonnes;j++){
          fprintf(fic,"%d ",tab[i][j]);
         }
          fprintf(fic,"\n");
      }
    }
    fclose(fic);
}


void afficherTableau(int nb_lignes, int nb_colonnes, int tab[nb_lignes][nb_colonnes],char* nomFichierEntete){
int i,j,compt1,compt2,largeur_fictive,champ,nbr_espace,largeur_reel,largtab;

largeur_fictive = (LARGEUR_ECRAN_EN_CARACTERES-1)/nb_colonnes;
if (largeur_fictive> 9)
    {champ=7;
       nbr_espace=(largeur_fictive-champ-1)/2;
       largeur_reel=champ+2*nbr_espace+1;
    }
else{
       nbr_espace=0;
       champ=largeur_fictive-1;
       largeur_reel=champ+2*nbr_espace+1;
    }

    largtab=(largeur_reel*nb_colonnes)+1;
 for (i=1;i<=largtab;i++)
     {  printf("-");
           if(i==largtab)
             printf("\n");
         }

          FILE *fic=fopen(nomFichierEntete,"r");
           signed char texte[256];
            if(fic==NULL)
             exit(1);
             else{
              fgets(texte,255,fic);
               printf("%s\n",texte);
                fclose(fic);}
    for (i=0;i<largtab;i++)
     {
         printf("-");
           if(i==largtab-1)
             printf("\n");
         }
    for(compt1=0;compt1<=nb_lignes-1;compt1++){
     for(compt2=0;compt2<=nb_colonnes-1;compt2++){
            printf("|");
      for (i=1;i<=nbr_espace;i++){
          printf (" ");}
          printf("%*d",champ,tab[compt1][compt2]);
       for (i=1;i<=nbr_espace;i++){
                printf (" ");}
           if(compt2==nb_colonnes-1)
             printf("|\n");
            }
            for (i=1;i<=largtab;i++){
         printf("-");
           if(i==largtab)
             printf("\n");
         }
                 }
 }

void afficherTableauUneCondition(int colonne, int valeur, int nb_lignes, int nb_colonnes, int
tab[nb_lignes][nb_colonnes],char *nomFichierEntete){
    int i,j,compt2,compt1,nbr,largeur_fictive,champ,nbr_espace,largtab,largeur_reel;
largeur_fictive = (LARGEUR_ECRAN_EN_CARACTERES-1)/nb_colonnes;
if (largeur_fictive> 9)
    {champ=7;
       nbr_espace=(largeur_fictive-champ-1)/2;
       largeur_reel=champ+2*nbr_espace+1;
    }
else{
       nbr_espace=0;
       champ=largeur_fictive-1;
       largeur_reel=champ+2*nbr_espace+1;
    }
    largtab=(largeur_reel*nb_colonnes)+1;
 for (i=1;i<=largtab;i++)
     {  printf("-");
           if(i==largtab)
             printf("\n");
         }
          FILE *fic=fopen(nomFichierEntete,"r");
           signed char texte[256];
            if(fic==NULL)
             exit(1);
             else{
              fgets(texte,255,fic);
               printf("%s\n",texte);
                fclose(fic);}
    for (i=0;i<largtab;i++)
     {
         printf("-");
           if(i==largtab-1)
             printf("\n");
         }
    for(compt1=0;compt1<=nb_lignes-1;compt1++){
            if(tab[compt1][colonne]==valeur){
     for(compt2=0;compt2<=nb_colonnes-1;compt2++){
            printf("|");
      for (i=1;i<=nbr_espace;i++){
          printf (" ");}
          printf("%*d",champ,tab[compt1][compt2]);
       for (i=1;i<=nbr_espace;i++){
                printf (" ");}


           if(compt2==nb_colonnes-1)
             printf("|\n");
            }
            for (i=1;i<=largtab;i++){
         printf("-");
           if(i==largtab)
             printf("\n");

         }}
                 }
 }

int chercherIndiceAvecUneCondition ( int colonneConcernee, int valeur, int nb_lignes, int
nb_colonnes, int tab[nb_lignes][nb_colonnes] ){
    int trouve;
    int i;
    int pos;
    pos=-1;
       i=0;
        trouve=0;
        while(trouve==0 && i<nb_lignes){
            if(valeur==tab[i][colonneConcernee]){
                trouve=1;
                pos=i;
            }
            else{
                 i++;
            }
        }
         return pos;
}


int chercherIndiceAvecDeuxConditions ( int colonneConcernee1, int valeur1, int colonneConcernee2,
int valeur2, int nb_lignes, int nb_colonnes, int tab[nb_lignes][nb_colonnes] ){

    int trouve;
    int i;
    int pos;
        pos=-1;
       i=0;
        trouve=0;
        while(trouve==0 && i<nb_lignes){
            if((valeur1==tab[i][colonneConcernee1]) &&(valeur2==tab[i][colonneConcernee2])){
                trouve=1;
                pos=i;
            }
            else{
                 i++;
            }
        }
         return pos;
}


void afficherPlateauBataille ( int numJoueur, int numJoueurEnnemi,
    int plateauBataille[NB_LIGNES_PLATEAUBATAILLE][NB_COLONNES_PLATEAUBATAILLE],
    int unitesBataille[NB_LIGNES_UNITESBATAILLE][NB_COLONNES_UNITESBATAILLE] ){

    afficherTableauUneCondition(NUM_JOUEUR_UB,numJoueurEnnemi,NB_LIGNES_UNITESBATAILLE,NB_COLONNES_UNITESBATAILLE,unitesBataille,"unitesBataille_entete.txt");
      int i,j,l;
       printf("\n");
      for(l=0;l<12;l++){
            printf("    ");
            printf(" %d",l);}
       for(i=0;i<NB_LIGNES_PLATEAUBATAILLE;i++){
              printf("\n");
              for(l=0;l<=(NB_COLONNES_PLATEAUBATAILLE*5)+14;l++){
                printf("-");}
               printf("\n");
              printf(" %2d",i);
            for(j=0;j<=NB_COLONNES_PLATEAUBATAILLE-1;j++){
                    int chiffre_dizaine=plateauBataille[i][j]/100%10;
                    int chiffre=plateauBataille[i][j]/1000;
		if(plateauBataille[i][j]==0){
		printf("|     ");
		}
		else if(plateauBataille[i][j]==1){
		printf("| +++ ");
		}
		else if(plateauBataille[i][j]%100==10){
		   printf("|J%dU%-2d",chiffre_dizaine,chiffre);
		}
        }
        printf("|");
        }
           printf("\n");
       for(i=0;i<=(NB_COLONNES_PLATEAUBATAILLE*5)+14;i++){
        printf("-");
      }
      printf("\n");
        afficherTableauUneCondition(NUM_JOUEUR_UB,numJoueur,NB_LIGNES_UNITESBATAILLE,NB_COLONNES_UNITESBATAILLE,unitesBataille,"unitesBataille_entete.txt");
 }


 void initialiserBataille ( int numJoueurHumain, int numJoueurEnnemi,
		int herosJoueurs[NB_LIGNES_HEROSJOUEURS][NB_COLONNES_HEROSJOUEURS],
		int unitesJoueurs[NB_LIGNES_UNITESJOUEURS][NB_COLONNES_UNITESJOUEURS],
		int plateauBataille[NB_LIGNES_PLATEAUBATAILLE][NB_COLONNES_PLATEAUBATAILLE],
		int unitesBataille[NB_LIGNES_UNITESBATAILLE][NB_COLONNES_UNITESBATAILLE])
{
	    int j,i;
			int vide_joueur_humaine,vide_enemei,colonne_joueur_humaine=0,colonne_enmei=0;
 				for(i=0;i<NB_LIGNES_UNITESBATAILLE;i++){
					for(j=0;j<NB_COLONNES_UNITESBATAILLE;j++){
						unitesBataille[i][j]=-1;
                    }
                }
                for(i=0;i<=NB_LIGNES_PLATEAUBATAILLE;i++){
					for(j=0;j<=NB_COLONNES_PLATEAUBATAILLE;j++){
						plateauBataille[i][j]=0;
                    }
                }
    for(i=0;i<NB_LIGNES_UNITESJOUEURS;i++){
		if(unitesJoueurs[i][NUM_JOUEUR_UJ]==0 && unitesJoueurs[i][UNITE_ACTIVE]==1){
			 vide_joueur_humaine=chercherIndiceAvecUneCondition(NUM_JOUEUR_UB,-1,NB_LIGNES_UNITESBATAILLE,NB_COLONNES_UNITESBATAILLE,unitesBataille);
				if(vide_joueur_humaine<NB_LIGNES_UNITESBATAILLE-1){
			    for( j=0;j<=NOMBRE_UJ;j++){
				 unitesBataille[vide_joueur_humaine][j]=unitesJoueurs[i][j];
		    	    }
				unitesBataille[vide_joueur_humaine][LIGNE_UB]=NB_LIGNES_UNITESBATAILLE-1;
				unitesBataille[vide_joueur_humaine][COLONNE_UB]=colonne_joueur_humaine;
				unitesBataille[vide_joueur_humaine][FINTOUR_UB]=0;
				unitesBataille[vide_joueur_humaine][SANTE_UNITAIRE_UB]= unitesBataille[vide_joueur_humaine][SANTE_RESTANTE_UB];
				plateauBataille[NB_LIGNES_PLATEAUBATAILLE-1][colonne_joueur_humaine]=(unitesBataille[vide_joueur_humaine][NUM_UNITE_UB]*1000)+(numJoueurHumain*100)+10;
				colonne_joueur_humaine+=2;
				}
		}
			if(unitesJoueurs[i][NUM_JOUEUR_UJ]==numJoueurEnnemi && unitesJoueurs[i][UNITE_ACTIVE]==1){
				vide_enemei=chercherIndiceAvecUneCondition (NUM_JOUEUR_UB,-1,NB_LIGNES_UNITESBATAILLE,NB_COLONNES_UNITESBATAILLE,unitesBataille);
				if(vide_enemei<NB_LIGNES_UNITESBATAILLE/2){
			    for( j=0;j<=NOMBRE_UJ;j++){
                unitesBataille[vide_enemei][j]=unitesJoueurs[i][j];
                }
				unitesBataille[vide_enemei][LIGNE_UB]=0;
				unitesBataille[vide_enemei][COLONNE_UB]=colonne_enmei;
				unitesBataille[vide_enemei][FINTOUR_UB]=0;
				unitesBataille[vide_enemei][SANTE_UNITAIRE_UB]= unitesBataille[vide_enemei][SANTE_RESTANTE_UB];
				plateauBataille[0][colonne_enmei]=(unitesBataille[vide_enemei][NUM_UNITE_UB]*1000)+(numJoueurEnnemi*100)+10;
				colonne_enmei+=2;
				}
		}
    }

}


void afficherTableauDeuxConditions (int colonne1, int valeur1, int colonne2, int valeur2, int nb_lignes
,int nb_colonnes, int tab[nb_lignes][nb_colonnes],char *nomFichierEntete){
int i,j,compt2,compt1,nbr,largeur_fictive,champ,nbr_espace,largtab,largeur_reel;
largeur_fictive = (LARGEUR_ECRAN_EN_CARACTERES-1)/nb_colonnes;
if (largeur_fictive> 9)
    {champ=7;
       nbr_espace=(largeur_fictive-champ-1)/2;
       largeur_reel=champ+2*nbr_espace+1;
    }
else{
       nbr_espace=0;
       champ=largeur_fictive-1;
       largeur_reel=champ+2*nbr_espace+1;
    }
    largtab=(largeur_reel*nb_colonnes)+1;
 for (i=1;i<=largtab;i++)
     {  printf("-");
           if(i==largtab)
             printf("\n");
         }
          FILE *fic=fopen(nomFichierEntete,"r");
           signed char texte[256];
            if(fic==NULL)
             exit(1);
             else{
              fgets(texte,255,fic);
               printf("%s\n",texte);
                fclose(fic);}
    for (i=0;i<largtab;i++)
     {
         printf("-");
           if(i==largtab-1)
             printf("\n");
         }
    for(compt1=0;compt1<=nb_lignes-1;compt1++){
            if((tab[compt1][colonne1]==valeur1) && (tab[compt1][colonne2]==valeur2)){
     for(compt2=0;compt2<=nb_colonnes-1;compt2++){
            printf("|");
      for (i=1;i<=nbr_espace;i++){
          printf (" ");}
          printf("%*d",champ,tab[compt1][compt2]);
       for (i=1;i<=nbr_espace;i++){
                printf (" ");}
           if(compt2==nb_colonnes-1)
             printf("|\n");
            }
            for (i=1;i<=largtab;i++){
         printf("-");
           if(i==largtab)
             printf("\n");

         }}
                 }
 }


void afficherCarte(int carte[NB_LIGNES_CARTE][NB_COLONNES_CARTE]){
      int i,j,l;
            printf("\n");
      for(l=0;l<10;l++){
            printf("    %d",l);}
       for(i=0;i<NB_LIGNES_CARTE;i++){
             printf("\n");
              for(l=1;l<(NB_COLONNES_CARTE*5)+4;l++){
                printf("-");}
              printf("\n");
             printf(" %d",i);
            for(j=0;j<NB_COLONNES_CARTE;j++){
                    int chiffre_unite=carte[i][j]%100%10;
                    int chiffre_dizaine=carte[i][j]%100/10;
        if(carte[i][j]==2){
             printf("| J  ");
        }
        else if(carte[i][j]==0){
             printf("|    ");
        }
        else if(carte[i][j]==1){
                 printf("| ?? ");
        }
        else if(chiffre_unite==1){
            printf("| ?? ");
        }
        else if(carte[i][j]%10==0)
{
       if(chiffre_dizaine==2){
         printf("| T  ") ;
         }
         else if(chiffre_dizaine==3){
          printf("| X  ");
          }
         else if(chiffre_dizaine==1){
             switch (chiffre_dizaine){
             case 1:printf("| E%d ",carte[i][j]/100);break;
             case 2:printf("| E%d ",carte[i][j]/100);break;
             case 3:printf("| E%d ",carte[i][j]/100);break;
             case 4:printf("| E%d ",carte[i][j]/100);break;
        }}

}
                else if(carte[i][j]%10==2){
                        switch(chiffre_dizaine)
                {
                case 1:
                    switch (carte[i][j]/100)
                    {
             case 1:printf("|JE%d ",carte[i][j]/100);break;
             case 2:printf("|JE%d ",carte[i][j]/100);break;
             case 3:printf("|JE%d ",carte[i][j]/100);break;
             case 4:printf("|JE%d ",carte[i][j]/100);break;
                    }
                    break;
                case 2:
                    printf("| JT ");
                    break;
                case 3:
                    printf("| JX ");
                    break;
                }
        }}
         printf("|");
}
           printf("\n");
       for(i=0;i<(NB_COLONNES_CARTE*5)+3;i++){
        printf("-");
      }
      printf("\n");
 }


void chargerJeuComplet(
int carte[NB_LIGNES_CARTE][NB_COLONNES_CARTE],
int joueurs[NB_LIGNES_JOUEURS][NB_COLONNES_JOUEURS],
int heros[NB_LIGNES_HEROS][NB_COLONNES_HEROS],
int herosJoueurs[NB_LIGNES_HEROSJOUEURS][NB_COLONNES_HEROSJOUEURS],
int unites[NB_LIGNES_UNITES][NB_COLONNES_UNITES],
int unitesJoueurs[NB_LIGNES_UNITESJOUEURS][NB_COLONNES_UNITESJOUEURS] ){
       chargerFichierVersTableau( NB_LIGNES_CARTE, NB_COLONNES_CARTE,carte,"carte_sauvegarde.txt");
       chargerFichierVersTableau( NB_LIGNES_JOUEURS, NB_COLONNES_JOUEURS,joueurs,"joueurs_sauvegarde.txt");
       chargerFichierVersTableau( NB_LIGNES_HEROS, NB_COLONNES_HEROS,heros ,"heros_sauvegarde.txt");
       chargerFichierVersTableau( NB_LIGNES_HEROSJOUEURS, NB_COLONNES_HEROSJOUEURS,herosJoueurs ,"herosJoueurs_sauvegarde.txt");
       chargerFichierVersTableau( NB_LIGNES_UNITES, NB_COLONNES_UNITES,unites,"unites_sauvegarde.txt");
       chargerFichierVersTableau( NB_LIGNES_UNITESJOUEURS, NB_COLONNES_UNITESJOUEURS,unitesJoueurs,"unitesJoueurs_sauvegarde.txt");
}

void sauvegarderJeuComplet (
int carte[NB_LIGNES_CARTE][NB_COLONNES_CARTE],
int joueurs[NB_LIGNES_JOUEURS][NB_COLONNES_JOUEURS],
int heros[NB_LIGNES_HEROS][NB_COLONNES_HEROS],
int herosJoueurs[NB_LIGNES_HEROSJOUEURS][NB_COLONNES_HEROSJOUEURS],
int unites[NB_LIGNES_UNITES][NB_COLONNES_UNITES],
int unitesJoueurs[NB_LIGNES_UNITESJOUEURS][NB_COLONNES_UNITESJOUEURS]){
    sauvegarderTableauDansFichier(NB_LIGNES_CARTE,NB_COLONNES_CARTE,carte,"carte_sauvegarde.txt");
    sauvegarderTableauDansFichier(NB_LIGNES_JOUEURS,NB_COLONNES_JOUEURS,joueurs,"Joueurs_sauvegarde.txt");
    sauvegarderTableauDansFichier(NB_LIGNES_HEROS,NB_COLONNES_HEROS,heros,"heros_sauvegarde.txt");
    sauvegarderTableauDansFichier(NB_LIGNES_HEROSJOUEURS,NB_COLONNES_HEROSJOUEURS, herosJoueurs,"herosJoueurs_sauvegarde.txt");
    sauvegarderTableauDansFichier(NB_LIGNES_UNITES,NB_COLONNES_UNITES,unites,"unites_sauvegarde.txt");
    sauvegarderTableauDansFichier(NB_LIGNES_UNITESJOUEURS, NB_COLONNES_UNITESJOUEURS,unitesJoueurs,"unitesJoueurs_sauvegarde.txt");
}


void afficherTableauxJeu(
int joueurs[NB_LIGNES_JOUEURS][NB_COLONNES_JOUEURS],
int heros[NB_LIGNES_HEROS][NB_COLONNES_HEROS],
int herosJoueurs[NB_LIGNES_HEROSJOUEURS ][NB_COLONNES_HEROSJOUEURS ],
int unites[NB_LIGNES_UNITES][NB_COLONNES_UNITES],
int unitesJoueurs[NB_LIGNES_UNITESJOUEURS][NB_COLONNES_UNITESJOUEURS]){
      printf("Tableau joueur :\n");
      afficherTableau( NB_LIGNES_JOUEURS, NB_COLONNES_JOUEURS,joueurs,"joueurs_entete.txt");
      printf("Tableau heros :\n");
      afficherTableau( NB_LIGNES_HEROS, NB_COLONNES_HEROS,heros,"heros_entete.txt");
      printf("Tableau herosJoueurs :\n");
      afficherTableau( NB_LIGNES_HEROSJOUEURS, NB_COLONNES_HEROSJOUEURS,herosJoueurs,"herosJoueurs_entete.txt");
      printf("Tableau unites :\n");
      afficherTableau( NB_LIGNES_UNITES, NB_COLONNES_UNITES,unites,"unites_entete.txt");
      printf("Tableau unitesJoueurs :\n");
      afficherTableau( NB_LIGNES_UNITESJOUEURS, NB_COLONNES_UNITESJOUEURS,unitesJoueurs,"unitesJoueurs_entete.txt");
}

void initialiserNouveauJeu (
int carte[NB_LIGNES_CARTE][NB_COLONNES_CARTE],
int joueurs[NB_LIGNES_JOUEURS][NB_COLONNES_JOUEURS],
int heros[NB_LIGNES_HEROS][NB_COLONNES_HEROS],
int herosJoueurs[NB_LIGNES_HEROSJOUEURS][NB_COLONNES_HEROSJOUEURS],
int unites[NB_LIGNES_UNITES][NB_COLONNES_UNITES],
int unitesJoueurs[NB_LIGNES_UNITESJOUEURS][NB_COLONNES_UNITESJOUEURS] )
{      chargerFichierVersTableau( NB_LIGNES_CARTE,NB_COLONNES_CARTE,carte,"carte_original.txt");
       chargerFichierVersTableau( NB_LIGNES_JOUEURS, NB_COLONNES_JOUEURS,joueurs,"joueurs_original.txt");
       chargerFichierVersTableau( NB_LIGNES_HEROS,NB_COLONNES_HEROS ,heros,"heros_original.txt");
       chargerFichierVersTableau( NB_LIGNES_HEROSJOUEURS,NB_COLONNES_HEROSJOUEURS,herosJoueurs,"herosJoueurs_original.txt");
       chargerFichierVersTableau( NB_LIGNES_UNITES, NB_COLONNES_UNITES,unites,"unites_original.txt");
       chargerFichierVersTableau( NB_LIGNES_UNITESJOUEURS, NB_COLONNES_UNITESJOUEURS,unitesJoueurs ,"unitesJoueurs_original.txt");
                                                                      }


void afficherContenuCaseCarte ( int valeurCase,
int herosJoueurs[NB_LIGNES_HEROSJOUEURS][NB_COLONNES_HEROSJOUEURS] )
{
        if(valeurCase%100/10==2){
        printf("-------------------------------\n");
        printf("| caisse a tresor = %d pieces !|\n",valeurCase/100);
        printf("-------------------------------\n");
    }
   else
        if(valeurCase%100/10==3){
        printf("-------------------------------------\n");
        printf("| caisse d'experience = %d points!|\n",valeurCase/100);
        printf("-------------------------------------\n");
    }
   else
        if(valeurCase%100/10==1){
       afficherTableauDeuxConditions(NUM_JOUEUR_HJ,valeurCase/100,HERO_PRINCIPAL,1,NB_LIGNES_HEROSJOUEURS,NB_COLONNES_HEROSJOUEURS,herosJoueurs,"herosJoueurs_entete.txt");
    }
    else{
        printf("---------------\n");
        printf("| case vide !|\n");
        printf("---------------\n");
    }

}

void lancerMenuAchatHeros ( int numJoueur,
int joueurs[NB_LIGNES_JOUEURS][NB_COLONNES_JOUEURS],
int heros[NB_LIGNES_HEROS][NB_COLONNES_HEROS],
int herosJoueurs[NB_LIGNES_HEROSJOUEURS][NB_COLONNES_HEROSJOUEURS] ){
    int choix,numhero,lign_numhero,lign_numjoueur, lign_herojoueur, lign_moins,or,prix,achat;
        printf("\n");
       printf("\n Information du joueur Humain :\n");
       afficherTableauUneCondition(NUM_JOUEUR_J,0,NB_LIGNES_JOUEURS,NB_COLONNES_JOUEURS,joueurs,"joueurs_entete.txt");
       printf("\n");
        printf("Liste des Heros Disponibles Pour achat :\n");
        afficherTableau( NB_LIGNES_HEROS, NB_COLONNES_HEROS, heros,"heros_entete.txt");
          do{
    printf("************************************\n");
    printf("**   Menu achat Heros             **\n");
    printf("************************************\n**");
    printf("1 - acheter un nouveau hero     **\n**");
    printf("0 - Revenir au menu precedent   **\n*");
    printf("***********************************\n");
    do{
     printf("Entrez votre choix a (0-1) : ");
     scanf("%d",&choix);
    }while(choix!=0 && choix!=1);
     if(choix==1){
          do{
                printf("entrez le numero du hero que vous voulez acheter : ");
                scanf("%d",&numhero);
                lign_numhero=chercherIndiceAvecUneCondition(NUM_HERO_H,numhero,NB_LIGNES_HEROS,NB_COLONNES_HEROS,heros);
          }while(lign_numhero==-1);
        lign_numhero=chercherIndiceAvecUneCondition(NUM_HERO_H,numhero,NB_LIGNES_HEROS,NB_COLONNES_HEROS,heros);
        lign_numjoueur=chercherIndiceAvecUneCondition(NUM_JOUEUR_J,numJoueur,NB_LIGNES_JOUEURS,NB_COLONNES_JOUEURS,joueurs);
        lign_herojoueur=chercherIndiceAvecDeuxConditions(NUM_JOUEUR_HJ,numJoueur,NUM_HERO_HJ,numhero,NB_LIGNES_HEROSJOUEURS,NB_COLONNES_HEROSJOUEURS,herosJoueurs);
        lign_moins=chercherIndiceAvecUneCondition(NUM_JOUEUR_HJ,-1,NB_LIGNES_HEROSJOUEURS,NB_COLONNES_HEROSJOUEURS,herosJoueurs);
        or=joueurs[lign_numjoueur][OR];
        prix=heros[lign_numhero][PRIX_H];

         if(lign_herojoueur!=-1){
            printf("\n  \" Achat annule ,car hero est deja acheter \" \n\n");
         }
         else
             if(or<prix){
            printf("\n \" Achat annule ,le joueur ne dispose pas du solde suffisant pour acheter cet hero! \"  \n");
         }

         else if(lign_moins>=NB_LIGNES_HEROSJOUEURS){
            printf(" \" Nombre des heros est maximal \" \n");
         }
         else{
        do{
                printf("Confirm l'achat (non=0/oui=1) : ");
                scanf("%d",&achat);
           }while(achat!=1 && achat!=0);

        if(achat==1){
                herosJoueurs[lign_moins][NUM_JOUEUR_HJ]=0;
                herosJoueurs[lign_moins][NUM_HERO_HJ]=numhero;
                herosJoueurs[lign_moins][HERO_PRINCIPAL]=0;
                herosJoueurs[lign_moins][POINTS_EXPERIENCE]=0;
                herosJoueurs[lign_moins][NIVEAU_HJ]=0;
                herosJoueurs[lign_moins][POINTS_COMPETENCE_HJ]=0;
                herosJoueurs[lign_moins][BONUS_ATTAQUE_HJ]=heros[lign_numhero][BONUS_ATTAQUE_H];
                herosJoueurs[lign_moins][BONUS_DEFENSE_HJ]=heros[lign_numhero][BONUS_DEFENSE_H];
                herosJoueurs[lign_moins][CHANCE_CRITIQUE_HJ]=heros[lign_numhero][CHANCE_CRITIQUE_H];
                herosJoueurs[lign_moins][MORAL_HJ]=heros[lign_numhero][MORAL_H];
                herosJoueurs[lign_moins][POINTS_ATTAQUE_SPECIALE_HJ]=heros[lign_numhero][POINTS_ATTAQUE_SPECIALE_H];
                joueurs[lign_numjoueur][OR]=joueurs[lign_numjoueur][OR]-prix;
                printf("\n \" Achat effectue avec succes ! \"\n");
                printf("\n Information du Joueur Humain :\n");
                afficherTableauUneCondition(NUM_JOUEUR_J,numJoueur,NB_LIGNES_JOUEURS,NB_COLONNES_JOUEURS,joueurs,"joueurs_entete.txt");
                printf("\t Hero du Joueur Humain \n");
                afficherTableauUneCondition(NUM_JOUEUR_HJ,numJoueur,NB_LIGNES_HEROSJOUEURS,NB_COLONNES_HEROSJOUEURS,herosJoueurs,"herosJoueurs_entete.txt");
                printf("\n");
            }
         }

         }
           }while(choix!=0);
}

void lancerMenuAchatUnites ( int numJoueur,
int joueurs[NB_LIGNES_JOUEURS][NB_COLONNES_JOUEURS],
int unites[NB_LIGNES_UNITES][NB_COLONNES_UNITES],
int unitesJoueurs[NB_LIGNES_UNITESJOUEURS][NB_COLONNES_UNITESJOUEURS] ){
int choix,num_unite,ligne_joueur,ligne_unite,ligne_moins, ligne_unitejoueur,or,prix,achat,soldat;
         printf("\n");
        printf("\t Informations du joueur Humain :\n");
        afficherTableauUneCondition(NUM_JOUEUR_J,0,NB_LIGNES_JOUEURS,NB_COLONNES_JOUEURS,joueurs,"joueurs_entete.txt");
        printf("\n");
        printf("\t Liste des unites Disponibles Pour achat :\n");
        afficherTableau( NB_LIGNES_UNITES, NB_COLONNES_UNITES,unites,"unites_entete.txt");
    do{
    printf("**************************************\n");
    printf("**     Menu achat unites            **\n");
    printf("**************************************\n");
    printf("*   1- Acheter des nouvelles unites  *\n");
    printf("*   0- Revenir au menu precedent     *\n");
    printf("**************************************\n");
    do{
     printf("Entrez votre choix a (0-1) : ");
     scanf("%d",&choix);
    }while(choix!=0 && choix!=1);
    if(choix==1){
             printf("Entrez le numero de l'unite que vous voulez acheter : ");
             scanf("%d",&num_unite);
             ligne_joueur=chercherIndiceAvecUneCondition(NUM_JOUEUR_J,numJoueur,NB_LIGNES_JOUEURS,NB_COLONNES_JOUEURS,joueurs);
             ligne_unite=chercherIndiceAvecUneCondition(NUM_UNITE_U,num_unite,NB_LIGNES_UNITES,NB_COLONNES_UNITES,unites);
             ligne_moins=chercherIndiceAvecUneCondition(NUM_JOUEUR_UJ,-1,NB_LIGNES_UNITESJOUEURS,NB_COLONNES_UNITESJOUEURS,unitesJoueurs);
             ligne_unitejoueur=chercherIndiceAvecDeuxConditions(NUM_JOUEUR_UJ,numJoueur,NUM_UNITE_UJ,num_unite,NB_LIGNES_UNITESJOUEURS,NB_COLONNES_UNITESJOUEURS,unitesJoueurs);
              prix=unites[ligne_unite][PRIX_U];
              or=joueurs[ligne_joueur][OR];
               if(or<prix){
                     printf("\n \" Achat annule,le joueur ne dispose pas du solde suffusant pour acheter cet unite \" \n");
               }
               else if(ligne_unite==-1){
                    printf("\n \" unites n'existe pas \"\n");
               }
               else
                    if(ligne_moins>=NB_LIGNES_UNITESJOUEURS){
                printf("\" atteint achat maximal \" \n");
               }
               else{
                  printf("Entrez le nombre des soldats que vous voulez acheter de ce type d'unite : ");
                  scanf("%d",&soldat);
                  if(or<soldat*prix){
                    printf("\n  \" Achat annule,le joueur ne dispose pas du solde suffusant pour acheter cet unite \"\n");
                  }
                  else{
                  do{
                      printf("Confirm l'achat (non=0/oui=1) : ");
                      scanf("%d",&achat);
                  }while(achat!=0 && achat!=1);
                  if(achat==1){
                        if(ligne_unitejoueur!=-1){
                            unitesJoueurs[ligne_unitejoueur][NOMBRE_UJ]=unitesJoueurs[ligne_unitejoueur][NOMBRE_UJ]+soldat;
                    }
                    else
                    {
                        unitesJoueurs[ligne_moins][NUM_JOUEUR_UJ]=numJoueur;
                        unitesJoueurs[ligne_moins][NUM_UNITE_UJ]=num_unite;
                        unitesJoueurs[ligne_moins][TYPE_UJ]=unites[ligne_unite][TYPE_U];
                        unitesJoueurs[ligne_moins][SANTE_UJ]=unites[ligne_unite][SANTE_U];
                        unitesJoueurs[ligne_moins][ATTAQUE_UJ]=unites[ligne_unite][ATTAQUE_U];
                        unitesJoueurs[ligne_moins][DEFENSE_UJ]=unites[ligne_unite][DEFENSE_U];
                        unitesJoueurs[ligne_moins][DEGATS_UJ]=unites[ligne_unite][DEGATS_U];
                        unitesJoueurs[ligne_moins][MOUVEMENTS_UJ]=unites[ligne_unite][MOUVEMENTS_U];
                        unitesJoueurs[ligne_moins][NOMBRE_UJ]=soldat;
                        unitesJoueurs[ligne_moins][NIVEAU_UJ]=0;
                        unitesJoueurs[ligne_moins][UNITE_ACTIVE]=0;
                        joueurs[ligne_joueur][OR]=(joueurs[ligne_joueur][OR]-(soldat*prix));
                    }}
                        printf("\n \" Achat effectue avec succes ! \"\n");
                        printf("\n");
                        printf("\t Informations du joueur Humain :\n");
                        afficherTableauUneCondition(NUM_JOUEUR_J,0,NB_LIGNES_JOUEURS,NB_COLONNES_JOUEURS,joueurs,"joueurs_entete.txt");
                        printf("\n");
                        printf("\t Informations des unites du joueur Humain \n");
                        afficherTableauUneCondition(NUM_JOUEUR_UJ,numJoueur,NB_LIGNES_UNITESJOUEURS,NB_COLONNES_UNITESJOUEURS,unitesJoueurs,"unitesJoueurs_entete.txt");
                        printf("\n");
                        }
                  }
  }
         }while(choix!=0);
}


void lancerMenuConfigurationHeros ( int numJoueur,
int joueurs[NB_LIGNES_JOUEURS][NB_COLONNES_JOUEURS],
int herosJoueurs[NB_LIGNES_HEROSJOUEURS][NB_COLONNES_HEROSJOUEURS] ){
     int num_hero,ligne_hero,hero_principal,choix;
        printf("Information des heros du Joueur Humain \n ");
        afficherTableauUneCondition(NUM_JOUEUR_HJ,numJoueur,NB_LIGNES_HEROSJOUEURS,NB_COLONNES_HEROSJOUEURS,herosJoueurs,"herosJoueurs_entete.txt");
         printf("\n");
          do{
    printf("**********************************************\n");
    printf("**        Menu configuration Hero           **\n");
    printf("**********************************************\n");
    printf("** 1- Mettre un nouveau hero comme principal**\n");
    printf("** 0- Revenir au menu precedent             **\n");
    printf("**********************************************\n");
              do{
                    printf("Entrez votre choix (0-1): ");
                    scanf("%d",&choix);

              }while(choix!=0 && choix!=1);
              switch(choix){
                  case 1:
       do{
            printf("Entrez le numero de votre hero principal : ");
            scanf("%d",&num_hero);
             ligne_hero=chercherIndiceAvecDeuxConditions(NUM_JOUEUR_HJ,numJoueur,NUM_HERO_HJ,num_hero,NB_LIGNES_HEROSJOUEURS,NB_COLONNES_HEROSJOUEURS,herosJoueurs);
       }while(ligne_hero==-1);

        ligne_hero=chercherIndiceAvecDeuxConditions(NUM_JOUEUR_HJ,numJoueur,NUM_HERO_HJ,num_hero,NB_LIGNES_HEROSJOUEURS,NB_COLONNES_HEROSJOUEURS,herosJoueurs);
        if(ligne_hero==-1){
            printf("vous n'avez pas de hero avec ce numero \n");
        }
        else {
            hero_principal=chercherIndiceAvecDeuxConditions(NUM_JOUEUR_HJ,numJoueur,HERO_PRINCIPAL,1,NB_LIGNES_HEROSJOUEURS,NB_COLONNES_HEROSJOUEURS,herosJoueurs);
            if(hero_principal!=-1){
            herosJoueurs[hero_principal][HERO_PRINCIPAL]=0;
            herosJoueurs[ligne_hero][HERO_PRINCIPAL]=1;
            printf("Hero %d est hero principal \n",num_hero);
            afficherTableauUneCondition(NUM_JOUEUR_HJ,numJoueur,NB_LIGNES_HEROSJOUEURS,NB_COLONNES_HEROSJOUEURS,herosJoueurs,"herosJoueurs_entete.txt");
            }else{
            herosJoueurs[ligne_hero][HERO_PRINCIPAL]=1;
            printf("Hero %d est hero principal \n",num_hero);
            afficherTableauUneCondition(NUM_JOUEUR_HJ,numJoueur,NB_LIGNES_HEROSJOUEURS,NB_COLONNES_HEROSJOUEURS,herosJoueurs,"herosJoueurs_entete.txt");
            }
        }}
          }while(choix!=0);
}

void lancerMenuConfigurationUnites ( int numJoueur,
int unitesJoueurs[NB_LIGNES_UNITESJOUEURS][NB_COLONNES_UNITESJOUEURS] ){
int active,ligne_unite,num_unite,choix,i,ligne_reserve;
      do{
             printf("\n");
             printf("Information des unites du Joueur Humain \n ");
             afficherTableauUneCondition(NUM_JOUEUR_UJ,numJoueur,NB_LIGNES_UNITESJOUEURS,NB_COLONNES_UNITESJOUEURS,unitesJoueurs,"unitesJoueurs_entete.txt");
               printf("\n");
    printf("**********************************************\n");
    printf("**      Menu configuration unites           **\n");
    printf("**********************************************\n");
    printf("**   1- Mettre une unite comme principal    **\n");
    printf("**   2- Mettre une unite comme reserve      **\n");
    printf("**   0- Revenir au menu precedent           **\n");
    printf("**********************************************\n");
              do{
                    printf("Entrez votre choix (0-1) : ");
                    scanf("%d",&choix);

              }while(choix!=0 && choix!=1 && choix!=2);
              switch(choix){
                  case 1:{
             printf("Entrez le numero de l'unite a rendre comme principal :");
             scanf("%d",&num_unite);
                 active=0;
                 ligne_unite=chercherIndiceAvecDeuxConditions(NUM_JOUEUR_UJ,numJoueur,NUM_UNITE_UJ,num_unite,NB_LIGNES_UNITESJOUEURS,NB_COLONNES_UNITESJOUEURS,unitesJoueurs);
                    if(ligne_unite==-1){
                        printf("\" vous n'avez pas d'unites avec ce numero \" \n");
                     }
            for(i=0;i<NB_LIGNES_UNITESJOUEURS;i++){
                    if(unitesJoueurs[i][NUM_JOUEUR_UJ]==0 && unitesJoueurs[i][UNITE_ACTIVE]==1){
                    active+=unitesJoueurs[i][UNITE_ACTIVE];
                    }
                            }
                     if(active==nbr_emplacement){
                        printf("Tout emplacement sont occupe \n");
                    }
                    else if(ligne_unite!=-1){
                        unitesJoueurs[ligne_unite][UNITE_ACTIVE]=1;
                        printf("Unnite %d principal\n",num_unite);
                    }

                  }break;
                  case 2:{
                    printf("Entrez le numero de l'unite a rendre comme reserve : ");
                    scanf("%d",&num_unite);
                    ligne_reserve=chercherIndiceAvecDeuxConditions(NUM_JOUEUR_UJ,0,NUM_UNITE_UJ,num_unite,NB_LIGNES_UNITESJOUEURS,NB_COLONNES_UNITESJOUEURS,unitesJoueurs);
                    if(ligne_reserve==-1){
                        printf("Vous n'avez pas d'unites avec ce numero \n");
                    }
                    else
                        {
                            unitesJoueurs[ligne_reserve][UNITE_ACTIVE]=0;
                            printf("Unite %d reserve \n",num_unite);

                 }  }break;
              }
      }while(choix!=0);
}


void marquerDeplacementsPossibles (
int plateauBataille[NB_LIGNES_PLATEAUBATAILLE][NB_COLONNES_PLATEAUBATAILLE],
int ligneCourante,int colonneCourante,int mouvements){

  int i,j;
  int somme=0;
  int ligne_min=ligneCourante-mouvements;
  int ligne_max=ligneCourante+mouvements;
  int colonne_min=colonneCourante-mouvements;
  int colonne_max=colonneCourante+mouvements;
  int differ_ligne=0;
  int differ_col=0;

   if(ligne_max>=NB_LIGNES_PLATEAUBATAILLE-1){
        ligne_max=NB_LIGNES_PLATEAUBATAILLE-1;
   }
   if(ligne_min<0){
        ligne_min=0;
   }
   if(colonne_max>=NB_COLONNES_PLATEAUBATAILLE-1){
        colonne_max=NB_COLONNES_PLATEAUBATAILLE-1;
   }
   if(colonne_min<0){
        colonne_min=0;
   }
    for(i=ligne_min;i<=ligne_max;i++){
        for(j=colonne_min;j<=colonne_max;j++){
             differ_ligne=abs(ligneCourante-i);
             differ_col=abs(colonneCourante-j);
             somme=differ_col+differ_ligne;
             if(somme<mouvements+1){
                if(plateauBataille[i][j]==0)
                    plateauBataille[i][j]=1;

            }
        }
    }
}


void effacerDeplacementsPossibles (
int plateauBataille[NB_LIGNES_PLATEAUBATAILLE][NB_COLONNES_PLATEAUBATAILLE] )
{
        int i,j;
         for(i=0;i<NB_LIGNES_PLATEAUBATAILLE;i++){
            for(j=0;j<NB_COLONNES_PLATEAUBATAILLE;j++){
                if(plateauBataille[i][j]==1){
                    plateauBataille[i][j]=0;
                }
            }
         }
}

void deplacerUnite ( int numJoueur, int indiceDansUniteEnBataille,
int numUnite, int ligne_courante, int colonne_courante,int nouvelle_ligne, int nouvelle_colonne,
int plateauBataille[NB_LIGNES_PLATEAUBATAILLE][NB_COLONNES_PLATEAUBATAILLE],
int unitesBataille[NB_LIGNES_UNITESBATAILLE][NB_COLONNES_UNITESBATAILLE] ){

if(plateauBataille[nouvelle_ligne][nouvelle_colonne]==1){
    unitesBataille[indiceDansUniteEnBataille][LIGNE_UB]= nouvelle_ligne;
     unitesBataille[indiceDansUniteEnBataille][COLONNE_UB]= nouvelle_colonne;
       plateauBataille[nouvelle_ligne][nouvelle_colonne]= plateauBataille[ligne_courante][colonne_courante];
       plateauBataille[ligne_courante][colonne_courante]=0;
    }
}

int codeAttaqueSansDeplacement(
int numJoueur, int typeUnite,int ligne_courante, int colonne_courante,
int plateauBataille[NB_LIGNES_PLATEAUBATAILLE][NB_COLONNES_PLATEAUBATAILLE] ){

 int premier=0,deuxieme=0,troiseme=0,qutreieme=0;
 int droite=plateauBataille[ligne_courante][colonne_courante+1];
 int gauche=plateauBataille[ligne_courante][colonne_courante-1];
 int bas=plateauBataille[ligne_courante+1][colonne_courante];
 int haut=plateauBataille[ligne_courante-1] [colonne_courante];

    if(typeUnite==1){
      return 1;
   }

   else
     if(typeUnite==0 || typeUnite==2){
        if(droite!=0 && droite/100%10!=numJoueur){
            premier=10;
        }
        if(gauche!=0 && gauche/100%10!=numJoueur){
            deuxieme=100;
        }
        if(bas!=0 && bas/100%10!=numJoueur){
            troiseme=1000;
        }
        if(haut!=0 && haut/100%10!=numJoueur){
            qutreieme=10000;
        }
        if(premier!=0 || deuxieme!=0 || troiseme!=0 || qutreieme!=0  ){
            return (premier+deuxieme+troiseme+qutreieme)+2;
        }
   }

   return 0;
}

int uniteAttaquable( int codeAttaque, int ligne_courante, int colonne_courante,
int ligne_ennemie, int colonne_ennemie ){

    int differ_ligne=abs(ligne_courante-ligne_ennemie);
    int differ_colonne=abs(colonne_courante-colonne_ennemie);
      int haut=codeAttaque/10000%10;
      int bas=codeAttaque/1000%10;
      int droite=codeAttaque/100%10;
      int gauche=codeAttaque/10%10;

    if(codeAttaque%10==1){
        return 1;
    }
    if(codeAttaque%10==2){
      if(differ_ligne==0 && differ_colonne==1 && droite==1){
        return 1;
    }
      if(differ_ligne==0 && differ_colonne==1 && gauche==1){
       return 1;
     }
      if(differ_ligne==1 && differ_colonne==0 && haut==1){
      return 1;
    }
      if(differ_ligne==1 && differ_colonne==0 && bas==1){
      return 1;
    }
    return 0;
}
}


void attaque( int indiceDansUniteEnBataille, int indiceEnnemiDansUnitesBataille,
int numJoueur, int numEnnemi, int ligne, int colonne,
int plateauBataille[NB_LIGNES_PLATEAUBATAILLE][NB_COLONNES_PLATEAUBATAILLE],
int unitesBataille[NB_LIGNES_UNITESBATAILLE][NB_COLONNES_UNITESBATAILLE],
int joueurs[NB_LIGNES_JOUEURS][NB_COLONNES_JOUEURS] )
{
    int perte_totale_de_sante;
    float bonus_attaque;
    int rest_sante_totale;
    int sante_totale_restant;
    int nombre_unite_restant;
    int sante_totale_unite_attaque;
    sante_totale_unite_attaque=unitesBataille[indiceEnnemiDansUnitesBataille][SANTE_UNITAIRE_UB]*unitesBataille[indiceEnnemiDansUnitesBataille][NOMBRE_UNITES_UB];
    bonus_attaque=abs((unitesBataille[indiceEnnemiDansUnitesBataille][ATTAQUE_UB]-unitesBataille[indiceDansUniteEnBataille][DEFENSE_UB]))/200.0;
    perte_totale_de_sante=unitesBataille[indiceEnnemiDansUnitesBataille][NOMBRE_UNITES_UB]*(unitesBataille[indiceEnnemiDansUnitesBataille][DEGATS_UB]*(1+bonus_attaque));
    sante_totale_restant=sante_totale_unite_attaque-perte_totale_de_sante;
    printf("<<  sante totale de l'unite attaquee %d  -  degats inflige %d  =  sante totale restante %d  >> \n",sante_totale_unite_attaque,perte_totale_de_sante,sante_totale_restant);
    if(sante_totale_restant<=0){
        joueurs[numEnnemi][NB_UNITES_PERDUES]+=1;
        joueurs[numJoueur][NB_UNITES_TUEES]+=1;
        plateauBataille[ligne][colonne]=0;
        for(int i=0;i<SANTE_UNITAIRE_UB;i++){
        unitesBataille[indiceEnnemiDansUnitesBataille][i]=-1;
        }
    }
    else{
        nombre_unite_restant=sante_totale_restant/unitesBataille[indiceEnnemiDansUnitesBataille][SANTE_UNITAIRE_UB];
        unitesBataille[indiceEnnemiDansUnitesBataille][NOMBRE_UNITES_UB]=nombre_unite_restant;
        rest_sante_totale=sante_totale_restant%unitesBataille[indiceEnnemiDansUnitesBataille][SANTE_UNITAIRE_UB];
    if(rest_sante_totale>=0){
            unitesBataille[indiceEnnemiDansUnitesBataille][NOMBRE_UNITES_UB]+=1;
            unitesBataille[indiceEnnemiDansUnitesBataille][SANTE_RESTANTE_UB]=rest_sante_totale;
        }
        else{
            unitesBataille[indiceEnnemiDansUnitesBataille][SANTE_RESTANTE_UB]=unitesBataille[indiceEnnemiDansUnitesBataille][SANTE_UNITAIRE_UB];
        }
    }
}


void reinitialiserToursBataille (
int unitesBataille[NB_LIGNES_UNITESBATAILLE][NB_COLONNES_UNITESBATAILLE] )
{
    for(int i=0;i<NB_LIGNES_UNITESBATAILLE;i++){
        unitesBataille[i][FINTOUR_UB]=0;
    }
}

int verificationGagnant ( int numJoueur, int numJoueurEnnemi, int
unitesBataille[NB_LIGNES_UNITESBATAILLE][NB_COLONNES_UNITESBATAILLE] )
{
    int nbr_joueur=0;
    int nbr_enemie=0;
     for(int i=0;i<NB_LIGNES_UNITESBATAILLE-1;i++){
        if(unitesBataille[i][NUM_JOUEUR_UB]==numJoueur){
            nbr_joueur++;
        }
        if(unitesBataille[i][NUM_JOUEUR_UB]==numJoueurEnnemi){
            nbr_enemie++;
        }
    }

    if(nbr_enemie>0 && nbr_joueur==0){
        return numJoueurEnnemi;
    }

    else if(nbr_joueur>0 && nbr_enemie==0){
        return numJoueur;
    }
    else{
        return -1;
    }
}

int verificationFinTours ( int numJoueur,int
unitesBataille[NB_LIGNES_UNITESBATAILLE][NB_COLONNES_UNITESBATAILLE] )
{
 int nombre_unite_fin_tour=0;
  for(int i=0;i<NB_LIGNES_UNITESBATAILLE;i++){
        if(unitesBataille[i][NUM_JOUEUR_UB]==numJoueur && unitesBataille[i][FINTOUR_UB]==0){
            nombre_unite_fin_tour++;
        }
  }
  if(nombre_unite_fin_tour > 0){
    return 0;
  }
  else{
    return 1;
  }
}

int jouerTourHumainBataille ( int numJoueur, int numJoueurEnnemi,
int joueurs[NB_LIGNES_JOUEURS][NB_COLONNES_JOUEURS],
int herosJoueurs[NB_LIGNES_HEROSJOUEURS][NB_COLONNES_HEROSJOUEURS],
int plateauBataille[NB_LIGNES_PLATEAUBATAILLE][NB_COLONNES_PLATEAUBATAILLE],
int unitesBataille[NB_LIGNES_UNITESBATAILLE][NB_COLONNES_UNITESBATAILLE])
{
    int num_unite;
    int codeattaque_contre,chiffre_unite,codeattaque;
    int indice_unite_battaile,indice_unite,chercher_enemie,chercher_unite_attaque;
    int nouvelle_ligne,nouvelle_colonne,ligne_enemie,colonne_enemie;
    int choix_attaquer,choix_deplacer;
    int fin_tour_forcer,verifier_gagnant,verifier_fintour;

    afficherPlateauBataille(numJoueur,numJoueurEnnemi,plateauBataille,unitesBataille);
    do{
        do{
          printf("donner le numero d'unite a jouer ou -1 si vous voulez forcer la fin du tour  :");
          scanf("%d",&num_unite);
          indice_unite_battaile=chercherIndiceAvecDeuxConditions(NUM_JOUEUR_UB,JOUEUR_HUMAIN,NUM_UNITE_UB,num_unite,NB_LIGNES_UNITESBATAILLE,NB_COLONNES_UNITESBATAILLE,unitesBataille);
         }while(num_unite!=-1 && indice_unite_battaile==-1 || unitesBataille[indice_unite_battaile][FINTOUR_UB]!=0);
          if(num_unite==-1){
            fin_tour_forcer=1;
          }
          else{
            if(indice_unite_battaile!=-1){
                  unitesBataille[indice_unite_battaile][FINTOUR_UB]=1;
                  marquerDeplacementsPossibles(plateauBataille,unitesBataille[indice_unite_battaile][LIGNE_UB],unitesBataille[indice_unite_battaile][COLONNE_UB],unitesBataille[indice_unite_battaile][MOUVEMENTS_UB]);
                  afficherPlateauBataille(JOUEUR_HUMAIN,numJoueurEnnemi,plateauBataille,unitesBataille);
                  printf("les cas marquees de +++ sont les cases ou l'hero pourra s'y placer !");
                    do{
                       printf("\n voulez vous deplacer l'unite ? (1:oui / 0:non) : ");
                       scanf("%d",&choix_deplacer);
                    }while(choix_deplacer!=0 && choix_deplacer!=1);
                    if(choix_deplacer==1){
                       do{
                          do{
                             printf("donner la ligne de la case a jouer (depuis les cases possibles marquees de + ) :");
                             scanf("%d",&nouvelle_ligne);
                           }while(nouvelle_ligne<0 || nouvelle_ligne>=NB_LIGNES_PLATEAUBATAILLE);

                          do{
                             printf("donner la colonne de la case a jouer (depuis les cases possibles marquees de + ) :");
                             scanf("%d",&nouvelle_colonne);
                           }while(nouvelle_colonne<0 || nouvelle_colonne>=NB_LIGNES_PLATEAUBATAILLE);

                        }while(plateauBataille[nouvelle_ligne][nouvelle_colonne]!=1);

                         printf("--deplacement de l'unite %d du joueur humain de la case (%d,%d) a la case (%d,%d)---\n",num_unite,unitesBataille[indice_unite_battaile][LIGNE_UB],unitesBataille[indice_unite_battaile][COLONNE_UB],nouvelle_ligne,nouvelle_colonne);
                         deplacerUnite(JOUEUR_HUMAIN,indice_unite_battaile,num_unite,unitesBataille[indice_unite_battaile][LIGNE_UB],unitesBataille[indice_unite_battaile][COLONNE_UB],nouvelle_ligne,nouvelle_colonne,plateauBataille,unitesBataille);
                         effacerDeplacementsPossibles(plateauBataille);
                         afficherPlateauBataille(JOUEUR_HUMAIN,numJoueurEnnemi,plateauBataille,unitesBataille);
                    }effacerDeplacementsPossibles(plateauBataille);

                         int type_unite=unitesBataille[indice_unite_battaile][TYPE_UB];
                         int ligne_unite=unitesBataille[indice_unite_battaile][LIGNE_UB];
                         int colonne_unite=unitesBataille[indice_unite_battaile][COLONNE_UB];
                         int fin_tour_unite=unitesBataille[indice_unite_battaile][FINTOUR_UB];
                         codeattaque=codeAttaqueSansDeplacement(JOUEUR_HUMAIN,type_unite,ligne_unite,colonne_unite,plateauBataille);
                          if(codeattaque>0){
                             printf("cette unite a la possibilites d'attaquer ! \n ");
                              do{
                                printf("vous avez attaquer un enemie ? (1:oui /0:non) : ");
                                scanf("%d",&choix_attaquer);
                              }while(choix_attaquer!=1 && choix_attaquer!=0);
                                if(choix_attaquer==1){
                                    fin_tour_unite=1;
                                    do{
                                        do{
                                          printf("donner la ligne de la case de l'unite enemie adjacente a ataquer :");
                                          scanf("%d",&ligne_enemie);
                                        }while(ligne_enemie<0 || ligne_enemie>=NB_LIGNES_PLATEAUBATAILLE);

                                       do{
                                          printf("donner la colonne de la case de l'unite enemie adjacente a ataquer :");
                                          scanf("%d",&colonne_enemie);
                                        }while(colonne_enemie<0 || colonne_enemie>=NB_COLONNES_PLATEAUBATAILLE);

                                    }while(plateauBataille[ligne_enemie][colonne_enemie]/100%10!=numJoueurEnnemi);

                                     chercher_enemie=chercherIndiceAvecDeuxConditions(LIGNE_UB,ligne_enemie,COLONNE_UB,colonne_enemie,NB_LIGNES_UNITESBATAILLE,NB_COLONNES_UNITESBATAILLE,unitesBataille);
                                     if(uniteAttaquable(codeattaque,unitesBataille[indice_unite_battaile][LIGNE_UB],unitesBataille[indice_unite_battaile][COLONNE_UB],ligne_enemie,colonne_enemie)==1){
                                        int numero_unite_enemie=plateauBataille[ligne_enemie][colonne_enemie]/1000;
                                        printf("L'unite %d du joueur humain attaque l'unite  d'enemie %d ! \n",num_unite,numero_unite_enemie);
                                        attaque(indice_unite_battaile,chercher_enemie,JOUEUR_HUMAIN,numero_unite_enemie,unitesBataille[chercher_enemie][LIGNE_UB],unitesBataille[chercher_enemie][COLONNE_UB],plateauBataille,unitesBataille,joueurs);
                                        printf("\n");
                                        afficherPlateauBataille(JOUEUR_HUMAIN,numJoueurEnnemi,plateauBataille,unitesBataille);
                                        printf("\n");
                                        printf("\n");
                                        chercher_unite_attaque=chercherIndiceAvecDeuxConditions(NUM_JOUEUR_UB,numJoueurEnnemi,NUM_UNITE_UB,numero_unite_enemie,NB_LIGNES_UNITESBATAILLE,NB_COLONNES_UNITESBATAILLE,unitesBataille);
                                        chiffre_unite=codeattaque%10;
                                        int type_unite_attaque=unitesBataille[chercher_unite_attaque][TYPE_UB];
                                        int ligne_unite_attaque=unitesBataille[chercher_unite_attaque][LIGNE_UB];
                                        int colonne_unite_attaque=unitesBataille[chercher_unite_attaque][COLONNE_UB];
                                        if(chiffre_unite>1 && chercher_unite_attaque!=-1){
                                               codeattaque_contre=codeAttaqueSansDeplacement(numJoueurEnnemi,type_unite_attaque,ligne_unite_attaque,colonne_unite_attaque,plateauBataille);
                                              if(codeattaque_contre>1){
                                                  printf("L'unite ennemi %d contre attaque l'unite %d du joueur humaine ! \n",numero_unite_enemie,num_unite);
                                                  attaque(chercher_unite_attaque,indice_unite_battaile,numero_unite_enemie,JOUEUR_HUMAIN,ligne_unite_attaque,colonne_unite_attaque,plateauBataille,unitesBataille,joueurs);
                                                    printf("\n");
                                                    afficherPlateauBataille(JOUEUR_HUMAIN,numJoueurEnnemi,plateauBataille,unitesBataille);
                                                    printf("\n");
                                              }
                                           }
                                     }
                                }
                          }
             }
            }
     verifier_fintour=verificationFinTours(numJoueur,unitesBataille);
     verifier_gagnant=verificationGagnant(numJoueur,numJoueurEnnemi,unitesBataille);
    }while(fin_tour_forcer!=1 && verifier_gagnant==-1 && verifier_fintour==0);
  return verifier_gagnant;
}

int choixAutomatiqueUniteEnnemie ( int numJoueurEnnemi, int codeAttaque,
int ligne_courante, int colonne_courante,
int plateauBataille[NB_LIGNES_PLATEAUBATAILLE][NB_COLONNES_PLATEAUBATAILLE],
int unitesBataille[NB_LIGNES_UNITESBATAILLE][NB_COLONNES_UNITESBATAILLE])
{
    int num_unite_attaque;
    int droite=0,gauche=0,haut=0,bas=0;
     if(codeAttaque==1){
            int chercher_indice=chercherIndiceAvecUneCondition(NUM_JOUEUR_UB,numJoueurEnnemi,NB_LIGNES_UNITESBATAILLE,NB_COLONNES_UNITESBATAILLE,unitesBataille);
            num_unite_attaque=unitesBataille[chercher_indice][NUM_UNITE_UB];
            return num_unite_attaque;
     }
   else
      if(codeAttaque>1){

       haut=(codeAttaque/10000)%10;
       bas=(codeAttaque/1000)%10;
       droite=(codeAttaque/100)%10;
       gauche=(codeAttaque/10)%10;

     if(gauche==1){
        num_unite_attaque=plateauBataille[ligne_courante][colonne_courante-1];
        return num_unite_attaque;
     }
     else if(droite==1){
        num_unite_attaque=plateauBataille[ligne_courante][colonne_courante+1];
        return num_unite_attaque;
     }
     else if(haut==1){
        num_unite_attaque=plateauBataille[ligne_courante-1][colonne_courante];
        return num_unite_attaque;
     }
     else if(bas==1){
        num_unite_attaque= plateauBataille[ligne_courante+1][colonne_courante];
        return num_unite_attaque;
     }
    }
}

void deplacementAutomatiqueUnite( int numJoueur, int typeUnite,
 int plateauBataille[NB_LIGNES_PLATEAUBATAILLE][NB_COLONNES_PLATEAUBATAILLE],
 int ligne_courante, int colonne_courante,
 int unitesBataille[NB_LIGNES_UNITESBATAILLE][NB_COLONNES_UNITESBATAILLE],
 int indiceUnite)
 {
     int num_unite=unitesBataille[indiceUnite][NUM_UNITE_UB];
     int codeattaque,trouve=0,i,j;
     int nouvelle_ligne=-1,nouvelle_colonne=-1;
     while(trouve==0){
        for(i=0;i<NB_LIGNES_PLATEAUBATAILLE-1;i++){
            for(j=0;j<NB_COLONNES_PLATEAUBATAILLE-1;j++){
                    if(plateauBataille[i][j]%10==1){
                        nouvelle_ligne=i;
                        nouvelle_colonne=j;
                    }
                    codeattaque=codeAttaqueSansDeplacement(numJoueur,typeUnite,nouvelle_ligne,nouvelle_colonne,plateauBataille);
                    if(codeattaque>0 && plateauBataille[nouvelle_ligne][nouvelle_colonne]/100%10!=numJoueur){
                        trouve=1;
                    }
         }
    }
   }
    if(trouve==1){
            deplacerUnite(numJoueur,indiceUnite,num_unite,ligne_courante,colonne_courante,nouvelle_ligne,nouvelle_colonne,plateauBataille,unitesBataille);
        }
        if(trouve==0 && nouvelle_ligne!=-1 && nouvelle_colonne!=-1){
         deplacerUnite(numJoueur,indiceUnite,num_unite,ligne_courante,colonne_courante,nouvelle_ligne,nouvelle_colonne,plateauBataille,unitesBataille);
        }
   printf("--deplacement de l'unite enemie %d  de la case (%d,%d) a la case (%d,%d)---\n",num_unite,ligne_courante,colonne_courante,nouvelle_ligne,nouvelle_colonne);
}


int jouerTourEnnemiBataille ( int numJoueur, int numJoueurEnnemi,
    int joueurs[NB_LIGNES_JOUEURS][NB_COLONNES_JOUEURS],
    int herosJoueurs[NB_LIGNES_HEROSJOUEURS][NB_COLONNES_HEROSJOUEURS],
    int plateauBataille[NB_LIGNES_PLATEAUBATAILLE][NB_COLONNES_PLATEAUBATAILLE],
    int unitesBataille[NB_LIGNES_UNITESBATAILLE][NB_COLONNES_UNITESBATAILLE]){

     int verifier_fintour,verifier_gagnant;
     int indice_unite_attaque_suivant;
     int num_unite_attaque,num_unite_attaquante,num_unite_enemie,num_unite_attaquante_nouvelle;
     int chiffre_unite,mouvement_unite_attaque;
     int type_unite_attaquante,type_unite_attaque,type_unite_joueur ,type_unite_enemei;
     int codeattaque_contre,codeattaque,nouvelle_codeattaque;
     int indice_unite_attaque,indice_unite_attaquante,nouvelle_indice_unite_attaque,indice_enemi,indice_enemie_unite;
     int ligne_unite_attaquante,colonne_unite_attaquante,ligne_corrent,colonne_corrent;
     int nouvelle_ligne_joueur,nouvelle_colonne_joueur;
     int ligne_enemie,colonne_enemie;

do{
    indice_unite_attaque=chercherIndiceAvecDeuxConditions(NUM_JOUEUR_UB,numJoueur,FINTOUR_UB,0,NB_LIGNES_UNITESBATAILLE,NB_COLONNES_UNITESBATAILLE,unitesBataille);
    num_unite_attaque=unitesBataille[indice_unite_attaque][NUM_UNITE_UB];
    ligne_corrent=unitesBataille[indice_unite_attaque][LIGNE_UB];
    colonne_corrent=unitesBataille[indice_unite_attaque][COLONNE_UB];
    type_unite_attaque=unitesBataille[indice_unite_attaque][TYPE_UB];
    codeattaque=codeAttaqueSansDeplacement(numJoueur,type_unite_attaque,ligne_corrent,colonne_corrent,plateauBataille);
    num_unite_attaquante=choixAutomatiqueUniteEnnemie(numJoueurEnnemi,codeattaque,ligne_corrent,colonne_corrent,plateauBataille,unitesBataille);
    indice_unite_attaquante=chercherIndiceAvecDeuxConditions(NUM_JOUEUR_UB,numJoueurEnnemi,NUM_UNITE_UB,num_unite_attaquante,NB_LIGNES_UNITESBATAILLE,NB_COLONNES_UNITESBATAILLE,unitesBataille);
    afficherPlateauBataille(numJoueurEnnemi,numJoueur,plateauBataille,unitesBataille);
     printf(" \n '\CHOISIR UNITE %d \' \n\n",num_unite_attaque);
    if(type_unite_attaque==1){
       ligne_unite_attaquante=unitesBataille[indice_unite_attaquante][LIGNE_UB];
       colonne_unite_attaquante=unitesBataille[indice_unite_attaquante][COLONNE_UB];
       afficherPlateauBataille(numJoueurEnnemi,numJoueur,plateauBataille,unitesBataille);
       printf("\n\n L'unite ennemi %d attaque l'unite %d du joueur humaine ! \n\n",numJoueur,num_unite_attaquante);
       attaque(indice_unite_attaque,indice_unite_attaquante,numJoueur,numJoueurEnnemi,ligne_unite_attaquante,colonne_unite_attaquante,plateauBataille,unitesBataille,joueurs);
       unitesBataille[indice_unite_attaque][FINTOUR_UB]=1;
    }
   else
        if(type_unite_attaque>1){
                mouvement_unite_attaque=unitesBataille[indice_unite_attaque][MOUVEMENTS_UB];
                marquerDeplacementsPossibles(plateauBataille,ligne_corrent,colonne_corrent,mouvement_unite_attaque);
                afficherPlateauBataille(numJoueurEnnemi,numJoueur,plateauBataille,unitesBataille);
                printf("\n\n\n");
                deplacementAutomatiqueUnite(numJoueur,type_unite_attaque,plateauBataille,ligne_corrent,colonne_corrent,unitesBataille,indice_unite_attaque);
                effacerDeplacementsPossibles(plateauBataille);
                afficherPlateauBataille(numJoueurEnnemi,numJoueur,plateauBataille,unitesBataille);
                nouvelle_indice_unite_attaque=chercherIndiceAvecDeuxConditions(NUM_JOUEUR_UB,numJoueur,FINTOUR_UB,0,NB_LIGNES_UNITESBATAILLE,NB_COLONNES_UNITESBATAILLE,unitesBataille);
                nouvelle_ligne_joueur=unitesBataille[nouvelle_indice_unite_attaque][LIGNE_UB];
                nouvelle_colonne_joueur=unitesBataille[nouvelle_indice_unite_attaque][COLONNE_UB];
                type_unite_joueur=unitesBataille[nouvelle_indice_unite_attaque][TYPE_UB];
                nouvelle_codeattaque=codeAttaqueSansDeplacement(numJoueur,type_unite_joueur,nouvelle_ligne_joueur,nouvelle_colonne_joueur,plateauBataille);
                num_unite_attaquante_nouvelle=choixAutomatiqueUniteEnnemie(numJoueurEnnemi,nouvelle_codeattaque,nouvelle_ligne_joueur,nouvelle_colonne_joueur,plateauBataille,unitesBataille)/1000;
                indice_enemi=chercherIndiceAvecDeuxConditions(NUM_JOUEUR_UB,numJoueurEnnemi,NUM_UNITE_UB,num_unite_attaquante_nouvelle,NB_LIGNES_UNITESBATAILLE,NB_COLONNES_UNITESBATAILLE,unitesBataille);
                if(nouvelle_codeattaque>1){
                      printf("\n\n L'unite ennemi %d attaque l'unite %d du joueur humaine ! \n\n",numJoueur,num_unite_attaquante_nouvelle);
                      attaque(nouvelle_indice_unite_attaque,indice_enemi,numJoueur,numJoueurEnnemi,nouvelle_ligne_joueur,nouvelle_colonne_joueur,plateauBataille,unitesBataille,joueurs);
                      afficherPlateauBataille(numJoueurEnnemi,numJoueur,plateauBataille,unitesBataille);
                      indice_enemie_unite=chercherIndiceAvecDeuxConditions(NUM_JOUEUR_UB,numJoueurEnnemi,NUM_UNITE_UB,num_unite_attaquante_nouvelle,NB_LIGNES_UNITESBATAILLE,NB_COLONNES_UNITESBATAILLE,unitesBataille);
                      type_unite_enemei=unitesBataille[indice_enemie_unite][TYPE_UB];
                      ligne_enemie=unitesBataille[indice_enemie_unite][LIGNE_UB];
                      colonne_enemie=unitesBataille[indice_enemie_unite][COLONNE_UB];
                      num_unite_enemie=unitesBataille[indice_enemie_unite][NUM_UNITE_UB];
                      chiffre_unite=nouvelle_codeattaque%10;
                      printf("chiffre unite %d || codeattaque %d",chiffre_unite,nouvelle_codeattaque);
                      if(chiffre_unite>1 && indice_enemie_unite!=-1){
                         codeattaque_contre=codeAttaqueSansDeplacement(numJoueurEnnemi,type_unite_enemei,ligne_enemie,colonne_enemie,plateauBataille);
                          if(codeattaque_contre>1){
                            printf("L'unite %d du joueur humain contre attaque l'unite ennemi %d  ! \n",num_unite_enemie,numJoueur);
                            attaque(indice_enemie_unite,nouvelle_indice_unite_attaque,numJoueurEnnemi,numJoueur,ligne_enemie,colonne_enemie,plateauBataille,unitesBataille,joueurs);
                            printf("\n");
                            printf("\n");
                    }
                      }
                }
                unitesBataille[indice_unite_attaque][FINTOUR_UB]=1;
                afficherPlateauBataille(numJoueurEnnemi,numJoueur,plateauBataille,unitesBataille);
               }

      verifier_fintour=verificationFinTours(numJoueur,unitesBataille);
      verifier_gagnant=verificationGagnant(numJoueur,numJoueurEnnemi,unitesBataille);
}while(verifier_gagnant==-1 && verifier_fintour==0);
   return verifier_gagnant;
}

void deroulerBataille ( int numJoueur, int numJoueurEnnemi,
int joueurs[NB_LIGNES_JOUEURS][NB_COLONNES_JOUEURS],
int herosJoueurs[NB_LIGNES_HEROSJOUEURS][NB_COLONNES_HEROSJOUEURS],
int unitesJoueurs[NB_LIGNES_UNITESJOUEURS][NB_COLONNES_UNITESJOUEURS],
int plateauBataille[NB_LIGNES_PLATEAUBATAILLE][NB_COLONNES_PLATEAUBATAILLE],
int unitesBataille[NB_LIGNES_UNITESBATAILLE][NB_COLONNES_UNITESBATAILLE])
{

int i,tour_humaine=1,tour_enemi=1;
int gagant_humaine,gagant_enemi;
int indice_joueur_humaine=chercherIndiceAvecUneCondition(NUM_JOUEUR_J,numJoueur,NB_LIGNES_JOUEURS,NB_COLONNES_JOUEURS,joueurs);
int indice_joueur_enemie=chercherIndiceAvecUneCondition(NUM_JOUEUR_J,numJoueurEnnemi,NB_LIGNES_JOUEURS,NB_COLONNES_JOUEURS,joueurs);

            do{
                    reinitialiserToursBataille(unitesBataille);
                    printf("\n\n --- TOUR DU JOUEUR HUMAIN --- \n\n");
                    printf("\n --- TOUR %d ---\n",tour_humaine);

                    gagant_humaine=jouerTourHumainBataille(numJoueur,numJoueurEnnemi,joueurs,herosJoueurs,plateauBataille,unitesBataille);
                    tour_humaine++;
                    if(gagant_humaine==-1){
                    printf("\n\n --- TOUR DU JOUEUR Ennemi --- \n\n");
                    printf("\n --- TOUR %d ---\n",tour_enemi);

                    gagant_enemi=jouerTourEnnemiBataille(numJoueurEnnemi,numJoueur,joueurs,herosJoueurs,plateauBataille,unitesBataille);
                    tour_enemi++;
                    }
            }while(gagant_enemi==-1 && gagant_humaine==-1);

            if(gagant_humaine!=-1){
                for(i=OR;i<=GEMME_JAUNE;i++){
                    joueurs[indice_joueur_humaine][i]+=joueurs[indice_joueur_enemie][i];
                    joueurs[indice_joueur_enemie][i]=0;
                }
                unitesBataille[indice_joueur_humaine][NB_BATAILLE_GAGNES]+=1;
                printf("\n\n --- FIN BATAILLE --- \n");
                printf("\n\n --- Le joueur HUMAINE a gagne le bataille ---\n");
            }
            if(gagant_enemi!=-1){
                 for(i=OR;i<=GEMME_JAUNE;i++){
                    joueurs[indice_joueur_enemie][i]+=joueurs[indice_joueur_humaine][i];
                    joueurs[indice_joueur_humaine][i]=0;
                  }
                printf("\n\n --- FIN BATAILLE --- \n");
                printf("\n\n --- Le joueur %d a gagne le bataille ---\n",numJoueurEnnemi);
                unitesBataille[indice_joueur_humaine][NB_BATAILLE_PERDUES]+=1;

            }
}


void executerAction (
int carte[NB_LIGNES_CARTE][NB_COLONNES_CARTE],
int joueurs[NB_LIGNES_JOUEURS][NB_COLONNES_JOUEURS],
int herosJoueurs[NB_LIGNES_HEROSJOUEURS][NB_COLONNES_HEROSJOUEURS],
int unitesJoueurs[NB_LIGNES_UNITESJOUEURS][NB_COLONNES_UNITESJOUEURS],
int plateauBataille[NB_LIGNES_PLATEAUBATAILLE][NB_COLONNES_PLATEAUBATAILLE],
int unitesBataille[NB_LIGNES_UNITESBATAILLE][NB_COLONNES_UNITESBATAILLE])
{

     int ind_joueur,ligne,colonne,lig_hero_principal,choix,lig_hero;
     ind_joueur=chercherIndiceAvecUneCondition(NUM_JOUEUR_J,JOUEUR_HUMAIN,NB_LIGNES_JOUEURS,NB_COLONNES_JOUEURS,joueurs);
     ligne=joueurs[ind_joueur][LIGNE_J];
     colonne=joueurs[ind_joueur][COLONNE_J];

    if(carte[ligne][colonne]%100/10==1){
           do{
                printf("Confirmez vous l'entree en bataille avec l'ennemie %d ?(non=0/oui=1) :",carte[ligne][colonne]/100);
                scanf("%d",&choix);
              }while(choix!=0 && choix!=1);
            if(choix==1){
                    initialiserBataille(JOUEUR_HUMAIN,carte[ligne][colonne]/100,herosJoueurs,unitesJoueurs,plateauBataille,unitesBataille);
                    deroulerBataille(JOUEUR_HUMAIN,carte[ligne][colonne]/100,joueurs,herosJoueurs,unitesJoueurs,plateauBataille,unitesBataille);
            }
    }

  else
     if(carte[ligne][colonne]%100/10==2){
        if(carte[ligne][colonne]/100==0){
            printf("Coffre de tresor deja ouvert !");
        }
        else{
        printf("Confirmez vous l'ajout de %d piece d'or a votre fortune personnelle ?(1=oui/0=non) : ",carte[ligne][colonne]/100);
       do{
            scanf("%d",&choix);
       }while(choix!=1 && choix!=0);
       switch(choix){
           case 1:joueurs[ind_joueur][OR]+=(carte[ligne][colonne])/100;
           printf("Un tresor de montant %d a ete decouvert et a ete ajoute a votre fortune ! ",carte[ligne][colonne]/100);
           carte[ligne][colonne]=carte[ligne][colonne]%100;
       }
        }}
    else
        if(carte[ligne][colonne]%100/10==3){
    lig_hero=chercherIndiceAvecUneCondition(NUM_JOUEUR_HJ,0,NB_LIGNES_HEROSJOUEURS,NB_COLONNES_HEROSJOUEURS,herosJoueurs);
    lig_hero_principal=chercherIndiceAvecDeuxConditions(NUM_JOUEUR_HJ,0,HERO_PRINCIPAL,1,NB_LIGNES_HEROSJOUEURS,NB_COLONNES_HEROSJOUEURS,herosJoueurs);
        if(lig_hero==-1){
            printf("\n Vous n'avez pas un hero \n");
        }
        else if(lig_hero_principal==-1){
            printf("\n Vous n'avez pas un hero principal \n");
         }
        else if(carte[ligne][colonne]/100==0){
                printf("\n Coffre d'experience deja ouvert ! \n");
            }
        else{
               printf("\n Confirmez vous l'ajout de %d points d'experinece a hero ?(1-oui/0-non) :",carte[ligne][colonne]/100);
               do{
                scanf("%d",&choix);
               }while(choix!=0 && choix!=1);
               switch(choix){
                   case 1:herosJoueurs[lig_hero_principal][POINTS_EXPERIENCE]+=carte[ligne][colonne]/100;
                   printf("\n Experience des points %d a ete ouverte et a ete ajoute a hero principal \n",carte[ligne][colonne]/100);
                   carte[ligne][colonne]=carte[ligne][colonne]%100;
                   printf("\n <<< Information Sur Votre Hero Principal >>>\n ");
                   afficherTableauDeuxConditions(NUM_JOUEUR_HJ,0,HERO_PRINCIPAL,1,NB_LIGNES_HEROSJOUEURS,NB_COLONNES_HEROSJOUEURS,herosJoueurs,"herosJoueurs_entete.txt");
               }
            }
         }
    }

void degagerNuages ( int lig, int col, int carte[NB_LIGNES_CARTE][NB_COLONNES_CARTE] ){
    int ligne_max,ligne_min,colonne_min,colonne_max,i,j,unitaire;

     ligne_min=lig-2;
     ligne_max=lig+2;
     colonne_min=col-2;
     colonne_max=col+2;

      if(ligne_min<0){
        ligne_min=0;
      }
      if(ligne_max>=NB_LIGNES_CARTE-1){
            ligne_max=NB_LIGNES_CARTE-1;
      }
      if(colonne_min<=0){
            colonne_min=0;
      }
      if(colonne_max>=NB_COLONNES_CARTE-1){
        colonne_max=NB_COLONNES_CARTE-1;
      }
        for(i=ligne_min;i<=ligne_max;i++){
            for(j=colonne_min;j<=colonne_max;j++){
                unitaire=carte[i][j]%10;
                if(unitaire==1){
                    carte[i][j]-=1;
                }

            }
        }
}


void avancer ( char action,
int carte[NB_LIGNES_CARTE][NB_COLONNES_CARTE],
int joueurs[NB_LIGNES_JOUEURS][NB_COLONNES_JOUEURS] ){
    int ligne_corrent,colonne_corrent, nouvelle_ligne,nouvelle_colonne;

  ligne_corrent=joueurs[JOUEUR_HUMAIN][LIGNE_J];
  colonne_corrent=joueurs[JOUEUR_HUMAIN][COLONNE_J];
    nouvelle_ligne=ligne_corrent;
    nouvelle_colonne=colonne_corrent;

if(action=='h'){
          if(ligne_corrent > 0){
            nouvelle_ligne=ligne_corrent-1;
            carte[ligne_corrent][colonne_corrent]-=2;
     }
  }

    else
      if(action=='b'){
        if(ligne_corrent < NB_LIGNES_CARTE-1){
           nouvelle_ligne=ligne_corrent+1;
           carte[ligne_corrent][colonne_corrent]-=2;
      }
  }

   else if(action=='g'){
        if(colonne_corrent >0){
                 nouvelle_colonne=colonne_corrent-1;
                 carte[ligne_corrent][colonne_corrent]-=2;
        }
    }

  else
     if(action=='d'){
        if(colonne_corrent <NB_COLONNES_CARTE-1){
           nouvelle_colonne=colonne_corrent+1;
           carte[ligne_corrent][colonne_corrent]-=2;
        }
    }

 if(nouvelle_ligne!=ligne_corrent || nouvelle_colonne!=colonne_corrent){
    joueurs[JOUEUR_HUMAIN][LIGNE_J]=nouvelle_ligne;
    joueurs[JOUEUR_HUMAIN][COLONNE_J]= nouvelle_colonne;
     carte[nouvelle_ligne][nouvelle_colonne]+=2;
}
  degagerNuages(nouvelle_ligne,nouvelle_colonne,carte);

}


void deroulerJeu (
int carte[NB_LIGNES_CARTE][NB_COLONNES_CARTE],
int joueurs[NB_LIGNES_JOUEURS][NB_COLONNES_JOUEURS],
int heros[NB_LIGNES_HEROS][NB_COLONNES_HEROS],
int herosJoueurs[NB_LIGNES_HEROSJOUEURS][NB_COLONNES_HEROSJOUEURS],
int unites[NB_LIGNES_UNITES][NB_COLONNES_UNITES],
int unitesJoueurs[NB_LIGNES_UNITESJOUEURS][NB_COLONNES_UNITESJOUEURS],
int plateauBataille[NB_LIGNES_PLATEAUBATAILLE][NB_COLONNES_PLATEAUBATAILLE],
int unitesBataille[NB_LIGNES_UNITESBATAILLE][NB_COLONNES_UNITESBATAILLE]  ){
    char ch;
    int i,j,valeurCase;
    do{
         printf("\n <<< JOUEUR HUMAIN >>> \n");
         afficherTableauUneCondition(NUM_JOUEUR_J,0,NB_LIGNES_JOUEURS,NB_COLONNES_JOUEURS,joueurs,"joueurs_entete.txt");
         printf("\n <<<  CARTE DU JEU  >>>\n");
         afficherCarte(carte);
         printf(" \n<<<< CONTENU DE LA CASE DU JOUEUR >>>>\n");
         for(i=0;i<NB_LIGNES_CARTE;i++){
            for(j=0;j<NB_COLONNES_CARTE;j++){
                if(carte[i][j]%10==2){
                    valeurCase=carte[i][j];
                }
            }
         }
         afficherContenuCaseCarte(valeurCase,herosJoueurs);
         printf("Cliquer Sur (h=haut , b=bas, g=gauche, d=droit, a=action, 0=menu principal) : ");
         do{
         scanf("%c",&ch);
         }while(ch!='h' && ch!='b' && ch!='d' && ch!='g' && ch!='a' && ch!='0');
        if( ch=='a'){
                 executerAction(carte,joueurs,herosJoueurs,unitesJoueurs,plateauBataille,unitesBataille );
                 sauvegarderJeuComplet(carte,joueurs,heros,herosJoueurs,unites,unitesJoueurs);
         }
          else{
            avancer(ch,carte,joueurs);
            sauvegarderJeuComplet(carte,joueurs,heros,herosJoueurs,unites,unitesJoueurs);
            }
    }while(ch!='0');
}

void lancerMenuCampement (
int joueurs[NB_LIGNES_JOUEURS][NB_COLONNES_JOUEURS],
int herosJoueurs[NB_LIGNES_HEROSJOUEURS][NB_COLONNES_HEROSJOUEURS],
int unitesJoueurs[NB_LIGNES_UNITESJOUEURS][NB_COLONNES_UNITESJOUEURS] ){
int d;
   printf("\n");
              do{
                     printf("\n");
    printf("**************************************\n");
    printf("**        Menu Campement            **\n");
    printf("**************************************\n");
    printf("**    1- configuration heros        **\n");
    printf("**    2- configuration unites       **\n");
    printf("**    0- Revenir au menu precedent  **\n");
     printf("**************************************\n");
     printf("Entrez votre choix d (0-2) : ");
     scanf("%d",&d);
        switch(d){
            case 1:printf("\n");lancerMenuConfigurationHeros(0,joueurs,herosJoueurs );break;
            case 2:printf("\n");lancerMenuConfigurationUnites (0,unitesJoueurs);break;
       }
         }while(d!=0);
}



void lancerMenuMagasin (
int joueurs[NB_LIGNES_JOUEURS][NB_COLONNES_JOUEURS],
int heros[NB_LIGNES_HEROS][NB_COLONNES_HEROS],
int herosJoueurs[NB_LIGNES_HEROSJOUEURS][NB_COLONNES_HEROSJOUEURS],
int unites[NB_LIGNES_UNITES][NB_COLONNES_UNITES],
int unitesJoueurs[NB_LIGNES_UNITESJOUEURS][NB_COLONNES_UNITESJOUEURS] ){
int a;

        do{
                 printf("\n");
    printf("************************************\n");
    printf("**       Menu Magasin             **\n");
    printf("************************************\n");
    printf("**    1- acheter des heros        **\n");
    printf("**    2- acheter des unites       **\n");
    printf("**    0- Revenir au menu precedent**\n");
    printf("************************************\n");
     printf("Entrez votre choix a (0-2) : ");
     scanf("%d",&a);
        switch(a){
            case 1:lancerMenuAchatHeros( 0,joueurs,heros,herosJoueurs);break;
            case 2:lancerMenuAchatUnites (0,joueurs,unites,unitesJoueurs);break;
        }
             }while(a!=0);
}


void lancerMenuPrincipal (
int carte[NB_LIGNES_CARTE][NB_COLONNES_CARTE],
int joueurs[NB_LIGNES_JOUEURS][NB_COLONNES_JOUEURS],
int heros[NB_LIGNES_HEROS][NB_COLONNES_HEROS],
int herosJoueurs[NB_LIGNES_HEROSJOUEURS][NB_COLONNES_HEROSJOUEURS],
int unites[NB_LIGNES_UNITES][NB_COLONNES_UNITES],
int unitesJoueurs[NB_LIGNES_UNITESJOUEURS][NB_COLONNES_UNITESJOUEURS],
int plateauBataille[NB_LIGNES_PLATEAUBATAILLE][NB_COLONNES_PLATEAUBATAILLE],
int unitesBataille[NB_LIGNES_UNITESBATAILLE][NB_COLONNES_UNITESBATAILLE]
){
int choix;

do{

    printf("\n");
    printf("************************************\n");
    printf("**        Menu Principal          **\n");
    printf("************************************\n");
    printf("**    1- Magasin                  **\n");
    printf("**    2- Campement                **\n");
    printf("**    3- Reprendre le jeu en cours**\n");
    printf("**    4- Nouvelle Partie          **\n");
    printf("**    5- Quitter                  **\n");
    printf("************************************\n");
    printf("Entrez votre choix  (1-5) : ");
     scanf("%d",&choix);
     switch(choix){
             case 1:
                  printf("\n\n");
                  lancerMenuMagasin(joueurs,heros,herosJoueurs,unites,unitesJoueurs);
                  sauvegarderJeuComplet(carte,joueurs,heros,herosJoueurs,unites,unitesJoueurs);
                break;
             case 2:
                    printf("\n\n");
                   lancerMenuCampement(joueurs,herosJoueurs,unitesJoueurs);
                   sauvegarderJeuComplet(carte,joueurs,heros,herosJoueurs,unites,unitesJoueurs);
                break;
             case 3:
                    printf("\n\n");
                   deroulerJeu(carte,joueurs,heros,herosJoueurs,unites,unitesJoueurs,plateauBataille,unitesBataille);
                   sauvegarderJeuComplet(carte,joueurs,heros,herosJoueurs,unites,unitesJoueurs);
                break;
             case 4:
                    initialiserNouveauJeu(carte,joueurs,heros,herosJoueurs,unites,unitesJoueurs);
                    sauvegarderJeuComplet(carte,joueurs,heros,herosJoueurs,unites,unitesJoueurs);
                break;
            }
     }while( choix!=5);
}


int main()
{
    int carte[NB_LIGNES_CARTE][NB_COLONNES_CARTE];
    int joueurs[NB_LIGNES_JOUEURS][NB_COLONNES_JOUEURS];
    int heros[NB_LIGNES_HEROS][NB_COLONNES_HEROS];
    int unites[NB_LIGNES_UNITES][NB_COLONNES_UNITES];
    int unitesJoueurs[NB_LIGNES_UNITESJOUEURS][NB_COLONNES_UNITESJOUEURS];
    int herosJoueurs[NB_LIGNES_HEROSJOUEURS ][NB_COLONNES_HEROSJOUEURS ];
    int plateauBataille[NB_LIGNES_PLATEAUBATAILLE][NB_COLONNES_PLATEAUBATAILLE];
    int unitesBataille[NB_LIGNES_UNITESBATAILLE][NB_COLONNES_UNITESBATAILLE];
    int choix;
     do{
    printf("************************************\n");
    printf("**Heroes magic war - caracter mode**\n");
    printf("************************************\n");
    printf("**      1 - Nouvele partie        **\n");
    printf("**      2 - charger partie        **\n");
    printf("************************************\n");
    printf("Entrer votre choix (1-2) : ");
    scanf("%d", &choix);
     }while(choix!=1 && choix!=2);
   if (choix == 1){
        printf("\t");
          initialiserNouveauJeu(carte,joueurs,heros,herosJoueurs,unites,unitesJoueurs);
          afficherTableauxJeu(joueurs,heros,herosJoueurs,unites,unitesJoueurs);
          sauvegarderJeuComplet(carte,joueurs,heros,herosJoueurs,unites,unitesJoueurs);
          printf(" carte :\n");
          afficherCarte(carte);
          printf("\n");
             }
else  {
          chargerJeuComplet(carte,joueurs,heros,herosJoueurs,unites,unitesJoueurs);
          printf("\n");
       }
         lancerMenuPrincipal(carte,joueurs,heros,herosJoueurs,unites,unitesJoueurs,plateauBataille,unitesBataille);
         return 0;
     }




